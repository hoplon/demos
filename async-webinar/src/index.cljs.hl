(page "index.html")

(defn mouse-loc->vec
  "Given a Google Closure normalized DOM mouse event return the
  mouse x and y position as a two element vector."
  [e]
  [(.-clientX e) (.-clientY e)])

;; =============================================================================
;; Example 1

(defc ex1-content         ["Waiting for a click ...."])
(defc ex1-click-count     0)
(defn ex1 []
  (when (< @ex1-click-count 1)
    (swap! ex1-click-count inc)
    (swap! ex1-content conj "Got a click!")))

;; =============================================================================
;; Example 2

(defc ex2-content         ["Waiting for a click ...."])
(defc ex2-click-count     0)
(defn ex2 []
  (when (= @ex2-click-count 1)
    (swap! ex2-click-count inc)
    (swap! ex2-content conj "Done"))
  (when (= @ex2-click-count 0)
    (swap! ex2-click-count inc)
    (swap! ex2-content conj "Got a Click!" "Waiting for another click ....")))

;; =============================================================================
;; Example 3

(defc ex3-content           ["Waiting for a click from Button A ....."])
(defc ex3-click-count-a     0)
(defc ex3-click-count-b     0)
(defn ex3a []
  (when (= @ex3-click-count-a 0)
    (swap! ex3-click-count-a inc)
    (swap! ex3-content conj "Got a click!" "Waiting for a click from Button B ....")) )
(defn ex3b []
  (when (and (= @ex3-click-count-a 1) (= @ex3-click-count-b 0))
    (swap! ex3-click-count-b inc)
    (swap! ex3-content conj "Done!")))

;; =============================================================================
;; Example 6

(defc ex6-content           ["Click the button to start tracking the mouse."])
(defc ex6-button-name       "GO!")
(defn ex6-toggle []
  (let [new-name    (if (= @ex6-button-name "GO!") "STOP!" "GO!")]
    (reset! ex6-button-name new-name)))
(defn ex6 [e]
  (when (= @ex6-button-name "STOP!")
    (swap! ex6-content conj (str (mouse-loc->vec e)))))

;; =============================================================================
;; Example 7

(defc ex7-content         ["Click the button to start tracking the mouse."])
(defc ex7-button-name     "GO!")
(defn ex7-toggle []
  (let [new-name    (if (= @ex7-button-name "GO!") "STOP!" "GO!")]
    (reset! ex7-button-name new-name)))
(defn ex7 [e]
  (when (= @ex7-button-name "STOP!")
    (let [[x y :as  m]   (mouse-loc->vec e)]
      (when (zero? (mod y 5))
        (swap! ex7-content conj (str m))))))

;; =============================================================================
;; Example 8

(defc ex8-content       ["Click the button ten times."])
(defc ex8-click-count   0)
(defn ex8 []
  (when (< @ex8-click-count 10)
    (swap! ex8-click-count inc)
    (when (= @ex8-click-count 1)
      (swap! ex8-content conj "1 Click!"))
    (when (> @ex8-click-count 1)
      (swap! ex8-content conj (str @ex8-click-count " clicks!")))
    (when (= @ex8-click-count 10)
      (swap! ex8-content conj "Done."))))

;; =============================================================================
;; Example 9

(defc ex9-index       0)
(defc ex9-animals     [:aardvark :beetle :cat :dog :elk :ferret
                     :goose :hippo :ibis :jellyfish :kangaroo])
(defc= ex9-card           (nth ex9-animals ex9-index))
(defn ex9-prev []
  (when (> @ex9-index 0)
    (swap! ex9-index dec)))
(defn ex9-next []
  (when (< @ex9-index (dec (count @ex9-animals)))
    (swap! ex9-index inc)))

;; =============================================================================
;; Example 10

(defc ex10-button-name  "START!")
(defc ex10-index       0)
(defn ex10 []
  (let [the-name    @ex10-button-name]
  (when (= the-name"START!")
    (reset! ex10-button-name "STOP!"))
  (when (= the-name"STOP!")
    (reset! ex10-button-name "DONE!"))))
(defc ex10-animals     [:aardvark :beetle :cat :dog :elk :ferret
                     :goose :hippo :ibis :jellyfish :kangaroo])
(defc= ex10-max        (dec (count ex10-animals)))
(defc= ex10-card           (nth ex10-animals ex10-index))
(defn ex10-prev []
  (if (> @ex10-index 0)
    (swap! ex10-index dec)
    (reset! ex10-index @ex10-max)))
(defn ex10-next []
  (if (< @ex10-index @ex10-max)
    (swap! ex10-index inc)
    (reset! ex10-index 0)))
(defn ex10-nav [k]
  (when (= @ex10-button-name "STOP!")
    (when (= k :next)
      (ex10-next))
    (when (= k :prev)
      (ex10-prev))))

(defn ex10-keys [e]
  (when (= @ex10-button-name "STOP!")
    (if (= (.-keyCode e) 39) (ex10-nav :next))
    (if (= (.-keyCode e) 37) (ex10-nav :prev))
    )
  )
